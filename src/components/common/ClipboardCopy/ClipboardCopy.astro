---
import styles from "./ClipboardCopy.css";
import Icon from "@/components/common/Icon/Icon.astro";
export type Props = {
  copyText: string;
  successText?: string;
};

const { copyText, successText = "コピーしました" } = Astro.props;
---

<clipboard-copy data-copy-text={copyText} data-success-text={successText}>
  <span class={styles.copy}>
    <button class={styles.button}>
      <slot />
      <Icon type="copy" />
    </button>
    <span aria-live="assertive" data-open="false" class={styles.notify}></span>
  </span>
</clipboard-copy>

<script>
  class ClipboardCopy extends HTMLElement {
    private button: HTMLButtonElement;
    private notify: HTMLSpanElement;
    private onClickCopy: EventListener;

    constructor() {
      super();

      const button = this.querySelector("button");
      const notify = this.querySelector('span[aria-live="assertive"]');

      if (button instanceof HTMLButtonElement) {
        this.button = button;
      } else {
        throw new Error("button is not found");
      }

      if (notify instanceof HTMLSpanElement) {
        this.notify = notify;
      } else {
        throw new Error("notify is not found");
      }

      this.onClickCopy = async () => this.copyToClipboard();
      this.button.addEventListener("click", this.onClickCopy);
    }

    async copyToClipboard() {
      const copyText = this.dataset.copyText;
      const successText = this.dataset.successText;

      if (!copyText || !successText)
        throw new Error("copyText or successText is not defined");

      try {
        await navigator.clipboard.writeText(copyText);
        this.notify.textContent = successText;
        this.notify.dataset.open = "true";
      } catch {
        this.notify.textContent = "コピーに失敗しました";
        this.notify.dataset.open = "true";
      } finally {
        setTimeout(() => {
          this.notify.textContent = "";
          this.notify.dataset.open = "false";
        }, 3000);
      }
    }

    disconnectedCallback() {
      this.button.removeEventListener("click", this.onClickCopy);
    }
  }

  customElements.define("clipboard-copy", ClipboardCopy);
</script>
