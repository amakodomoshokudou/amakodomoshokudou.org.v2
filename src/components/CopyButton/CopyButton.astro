---
import { getImage } from "astro:assets";
import img from "./assets/icon.svg";
import { uniqueId } from "../../libs/unique-id";

export type Props = {
  copyText: string;
  successText?: string;
  label?: boolean;
  size?: "sm" | "md";
};

const {
  copyText,
  successText = "コピーしました",
  size = "md",
  label = false,
} = Astro.props;
const icon = await getImage({ src: img });

const uid = uniqueId();

const buttonId = `button-${uid}`;
const notifyId = `notify-${uid}`;
---

<span class="inline-grid w-fit">
  <button
    id={buttonId}
    type="button"
    class={[
      "inline-grid grid-cols-[1fr,auto] items-center rounded-xl border border-primary-border [grid-area:1/1]",
      size === "sm" && " gap-x-4 px-8 py-4 text-sm",
      size === "md" && " gap-x-8 px-12 py-8 text-md",
    ].join(" ")}
  >
    <slot />
    <span
      role="img"
      aria-label={label ? "をコピー" : undefined}
      style={{
        maskImage: `url(${icon.src})`,
        WebkitMaskImage: `url(${icon.src})`,
      }}
      class="size-[1em] bg-[currentColor] [mask-position:center] [mask-repeat:no-repeat] [mask-size:cover]"
    ></span>
  </button>
  <span
    id={notifyId}
    aria-live="assertive"
    data-open="false"
    class="isolate self-start justify-self-end rounded-sm border-secondary-border bg-tertiary-background text-xs [grid-area:1/1] data-[open=true]:border data-[open=true]:p-4"
  ></span>
</span>

<script
  is:inline
  define:vars={{
    __copyText: copyText,
    __successText: successText,
    __buttonId: buttonId,
    __notifyId: notifyId,
  }}
>
  /**
   * @typedef {Object} Vars
   * @property {string} copyText - コピーするテキスト
   * @property {string} successText - 成功時に表示するテキスト
   * @property {string} buttonId - ボタンのID
   * @property {string} notifyId - 通知エレメントのID
   */

  /** @type {Vars} */
  const VARS = {
    copyText: __copyText,
    successText: __successText,
    buttonId: __buttonId,
    notifyId: __notifyId,
  };

  const button = document.getElementById(VARS.buttonId);
  const notify = document.getElementById(VARS.notifyId);

  if ((!button) instanceof HTMLButtonElement) {
    throw new Error("button is not found");
  }
  if ((!notify) instanceof HTMLSpanElement) {
    throw new Error("notify is not found");
  }

  button.addEventListener("click", async () => {
    try {
      await navigator.clipboard.writeText(VARS.copyText);
      notify.textContent = VARS.successText;
      notify.dataset.open = "true";
    } catch {
      notify.textContent = "コピーに失敗しました";
      notify.dataset.open = "true";
    } finally {
      setTimeout(() => {
        notify.textContent = "";
        notify.dataset.open = "false";
      }, 3000);
    }
  });
</script>
