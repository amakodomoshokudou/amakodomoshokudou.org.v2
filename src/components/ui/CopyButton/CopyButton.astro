---
import { getImage } from "astro:assets";
import img from "./assets/icon.svg";

export type Props = {
  copyText: string;
  successText?: string;
  label?: boolean;
  size?: "sm" | "md";
};

const {
  copyText,
  successText = "コピーしました",
  size = "md",
  label = false,
} = Astro.props;
const icon = await getImage({ src: img });
---

<span
  class="inline-grid w-fit"
  data-id="copy-button"
  data-copy-text={copyText}
  data-success-text={successText}
>
  <button
    type="button"
    class={[
      "inline-grid grid-cols-[1fr_auto] items-center rounded-xl border border-primary-border [grid-area:1/1]",
      size === "sm" && " gap-x-4 px-8 py-4 text-sm/sm",
      size === "md" && " gap-x-8 px-12 py-8 text-md/md",
    ].join(" ")}
  >
    <slot />
    <span
      role="img"
      aria-label={label ? "をコピー" : undefined}
      style={{
        maskImage: `url(${icon.src})`,
        WebkitMaskImage: `url(${icon.src})`,
      }}
      class="size-[1em] bg-[currentColor] [mask-position:center] [mask-repeat:no-repeat] [mask-size:cover]"
    ></span>
  </button>
  <span
    aria-live="assertive"
    data-open="false"
    class="border-secondary-border bg-tertiary-background text-xs/xs isolate self-start justify-self-end rounded-xs [grid-area:1/1] data-[open=true]:border data-[open=true]:p-4"
  ></span>
</span>

<script>
  const copyButtonList = document.querySelectorAll<HTMLSpanElement>(
    "[data-id=copy-button]",
  );

  for (const copyButton of copyButtonList) {
    const button = copyButton.querySelector<HTMLButtonElement>("button");
    const notify = copyButton.querySelector<HTMLSpanElement>(
      "[aria-live=assertive]",
    );

    if (!button) {
      throw new Error("button is not found");
    }
    if (!notify) {
      throw new Error("notify is not found");
    }

    const $copyText = copyButton.dataset.copyText;
    const $successText = copyButton.dataset.successText;

    if (!$copyText) {
      throw new Error("copyText is not found");
    }

    if (!$successText) {
      throw new Error("successText is not found");
    }

    button.addEventListener("click", async () => {
      try {
        await navigator.clipboard.writeText($copyText);
        notify.textContent = $successText;
        notify.dataset.open = "true";
      } catch {
        notify.textContent = "コピーに失敗しました";
        notify.dataset.open = "true";
      } finally {
        setTimeout(() => {
          notify.textContent = "";
          notify.dataset.open = "false";
        }, 3000);
      }
    });
  }
</script>
