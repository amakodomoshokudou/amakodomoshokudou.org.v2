---
import { Image } from "astro:assets";
import closeIcon from "./assets/cancel.svg";
import menuIcon from "./assets/menu.svg";
---

<menu-dialog>
  <button
    id="menu-open"
    aria-expanded="false"
    class="inline-grid grid-cols-[1.25rem,1fr] items-center gap-x-4 rounded-full border border-primary-border text-sm font-bold px-12 py-4 lg:hidden"
  >
    <Image src={menuIcon} alt="" />メニュー
  </button>
  <dialog
    aria-label="メニュー"
    class="size-full bg-[transparent] max-w-full max-h-full"
  >
    <div class="bg-primary-background p-20">
      <div class="grid gap-y-20 mx-auto max-w-576">
        <button
          id="menu-close"
          class="flex items-center justify-center gap-x-8 rounded-full border border-primary-border bg-primary-background font-bold px-12 py-8"
        >
          <Image src={closeIcon} alt="" class="w-20" />閉じる
        </button>
        <slot />
      </div>
    </div>
  </dialog>
</menu-dialog>

<script>
  class MenuDialog extends HTMLElement {
    private dialog: HTMLDialogElement | null = null;
    private openButton: HTMLButtonElement | null = null;
    private closeButton: HTMLButtonElement | null = null;
    private openListener: EventListener = () => {};
    private closeListener: EventListener = () => {};

    constructor() {
      super();
    }

    connectedCallback() {
      this.dialog = this.querySelector("dialog");
      this.openButton = this.querySelector("button#menu-open");
      this.closeButton = this.querySelector("button#menu-close");
      this.openListener = this.openDialog.bind(this);
      this.closeListener = this.closeDialog.bind(this);

      if (
        this.dialog === null ||
        this.openButton === null ||
        this.closeButton === null
      ) {
        throw new Error("DOMが正しく設定されていません。");
      }

      this.openButton.addEventListener("click", this.openListener);
      this.closeButton.addEventListener("click", this.closeListener);
      this.dialog.addEventListener("click", (event) => {
        if (event.target === this.dialog) {
          this.closeDialog();
        }
      });
    }

    openDialog() {
      this.dialog?.showModal();
    }

    closeDialog() {
      this.dialog?.close();
    }

    disconnectedCallback() {
      this.openButton?.removeEventListener("click", this.openListener);
      this.closeButton?.removeEventListener("click", this.closeListener);
    }
  }

  customElements.define("menu-dialog", MenuDialog);
</script>
